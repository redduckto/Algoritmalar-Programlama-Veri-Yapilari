
public class UrunTree {
    public class Node{


        public Urun data;
        Node leftchild;
        Node rightchild;

        public void displayNode(){

            System.out.print(" "+data+" ");
        }
    }

    public Node root;
    public void insert(Urun newdata) {

        Node newnode = new Node();
        newnode.data = newdata;
        if (root == null)
            root = newnode;

        else {
            Node current = root;
            Node parent;
            while (true) {
                parent = current;
                if (newdata.getUrunAdý().compareTo(current.data.getUrunAdý()) < 0) {
                    current = current.leftchild;
                    if (current == null) {
                        parent.leftchild = newnode;

                        return;
                    }
                    else
                    {
                        current=current.rightchild;
                        if(current==null){
                            parent.rightchild=newnode;

                            return;
                        }
                    }
                }
            }
        }
    }

    public int leafcount(Node node) {

        if (node== null) return 0;
        else {
            return 1 + leafcount(node.rightchild) + leafcount(node.leftchild);
        }
    }


    public static int sumOfLeafDepths(Node node,int depth){

        if(node==null)
            return 0;
        else if(node.rightchild==null&&node.leftchild==null)
            return 1;
        else

            return sumOfLeafDepths(node.rightchild,depth+1)+sumOfLeafDepths(node.leftchild,depth+1);

    }
    public static int maxleafDepth(Node node,int depth){

        if(node==null)
            return 0;
        else if(node.leftchild==null&&node.rightchild==null)
            return 1;
        else {
            int maxleft = maxleafDepth(node.leftchild, depth + 1);

            int maxright = maxleafDepth(node.rightchild, depth + 1);
            if(maxleft>maxright)return maxleft;
            else return maxright;

        }

    }



}


